# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  post: PostFilter
  global: GlobalFilter
  author: AuthorFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Post | Global | Author | Page

union PostAuthor = Author

type Post implements Node & Document {
  title: String
  desc: String
  keywords: String
  heroImg: String
  excerpt: JSON
  author: PostAuthor
  date: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostAuthorFilter {
  author: AuthorFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input Post_bodyDateTimeFilter {
  format: StringFilter
}

input Post_bodyBlockQuoteFilter {
  children: RichTextFilter
  authorName: StringFilter
}

input Post_bodyNewsletterSignupFilter {
  children: RichTextFilter
  placeholder: StringFilter
  buttonText: StringFilter
  disclaimer: RichTextFilter
}

input Post_bodyFilter {
  DateTime: Post_bodyDateTimeFilter
  BlockQuote: Post_bodyBlockQuoteFilter
  NewsletterSignup: Post_bodyNewsletterSignupFilter
}

input PostFilter {
  title: StringFilter
  desc: StringFilter
  keywords: StringFilter
  heroImg: ImageFilter
  excerpt: RichTextFilter
  author: PostAuthorFilter
  date: DatetimeFilter
  _body: Post_bodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type GlobalHeaderIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type GlobalTheme {
  color: String
  font: String
  icon: String
  darkMode: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalHeaderIconFilter {
  color: StringFilter
  style: StringFilter
  name: StringFilter
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderFilter {
  icon: GlobalHeaderIconFilter
  color: StringFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterSocialFilter {
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  github: StringFilter
}

input GlobalFooterFilter {
  color: StringFilter
  social: GlobalFooterSocialFilter
}

input GlobalThemeFilter {
  color: StringFilter
  font: StringFilter
  icon: StringFilter
  darkMode: StringFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
  theme: GlobalThemeFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Author implements Node & Document {
  name: String
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  name: StringFilter
  avatar: StringFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type PageBlocksHeader {
  title: String
  pagedesc: String
  pagekeywords: String
}

type PageBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
  link: String
}

type PageBlocksHeroImage {
  src: String
  alt: String
}

type PageBlocksHero {
  tagline: String
  headline: String
  text: JSON
  actions: [PageBlocksHeroActions]
  image: PageBlocksHeroImage
}

type PageBlocksFeaturesItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksFeaturesItems {
  icon: PageBlocksFeaturesItemsIcon
  title: String
  text: JSON
}

type PageBlocksFeatures {
  items: [PageBlocksFeaturesItems]
  color: String
}

type PageBlocksWeeknieuws {
  LinkTitle: String
  file: String
}

type PageBlocksFormItems {
  type: String
  questiontitle: String
  questionrequired: Boolean
  questionid: String
  placeholder: String
}

type PageBlocksForm {
  airformEmail: String
  airformTitle: String
  items: [PageBlocksFormItems]
}

type PageBlocksBanner {
  bannerURL: String
  bannertext: String
  vervaldatum: String
}

type PageBlocksHeading {
  titleText: String
  textsize: String
}

type PageBlocksImage {
  fileRef: String
  imageTitle: String
  alt: String
  description: String
}

type PageBlocksVideo {
  videoURL: String
  videodescription: JSON
  coverImage: String
  title: String
}

type PageBlocksAudio {
  audioURL: String
  audiodescription: JSON
  title: String
}

type PageBlocksContent {
  body: JSON
}

type PageBlocksTestimonial {
  quote: JSON
  author: String
}

union PageBlocks = PageBlocksHeader | PageBlocksHero | PageBlocksFeatures | PageBlocksWeeknieuws | PageBlocksForm | PageBlocksBanner | PageBlocksHeading | PageBlocksImage | PageBlocksVideo | PageBlocksAudio | PageBlocksContent | PageBlocksTestimonial

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageBlocksHeaderFilter {
  title: StringFilter
  pagedesc: StringFilter
  pagekeywords: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksHeroActionsFilter {
  label: StringFilter
  type: StringFilter
  icon: BooleanFilter
  link: StringFilter
}

input PageBlocksHeroImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PageBlocksHeroFilter {
  tagline: StringFilter
  headline: StringFilter
  text: RichTextFilter
  actions: PageBlocksHeroActionsFilter
  image: PageBlocksHeroImageFilter
}

input PageBlocksFeaturesItemsIconFilter {
  color: StringFilter
  style: StringFilter
  name: StringFilter
}

input PageBlocksFeaturesItemsFilter {
  icon: PageBlocksFeaturesItemsIconFilter
  title: StringFilter
  text: RichTextFilter
}

input PageBlocksFeaturesFilter {
  items: PageBlocksFeaturesItemsFilter
  color: StringFilter
}

input PageBlocksWeeknieuwsFilter {
  LinkTitle: StringFilter
  file: StringFilter
}

input PageBlocksFormItemsFilter {
  type: StringFilter
  questiontitle: StringFilter
  questionrequired: BooleanFilter
  questionid: StringFilter
  placeholder: StringFilter
}

input PageBlocksFormFilter {
  airformEmail: StringFilter
  airformTitle: StringFilter
  items: PageBlocksFormItemsFilter
}

input PageBlocksBannerFilter {
  bannerURL: StringFilter
  bannertext: StringFilter
  vervaldatum: DatetimeFilter
}

input PageBlocksHeadingFilter {
  titleText: StringFilter
  textsize: StringFilter
}

input PageBlocksImageFilter {
  fileRef: ImageFilter
  imageTitle: StringFilter
  alt: StringFilter
  description: StringFilter
}

input PageBlocksVideoFilter {
  videoURL: StringFilter
  videodescription: RichTextFilter
  coverImage: ImageFilter
  title: StringFilter
}

input PageBlocksAudioFilter {
  audioURL: StringFilter
  audiodescription: RichTextFilter
  title: StringFilter
}

input PageBlocksContentFilter {
  body: RichTextFilter
}

input PageBlocksTestimonialFilter {
  quote: RichTextFilter
  author: StringFilter
}

input PageBlocksFilter {
  header: PageBlocksHeaderFilter
  hero: PageBlocksHeroFilter
  features: PageBlocksFeaturesFilter
  weeknieuws: PageBlocksWeeknieuwsFilter
  form: PageBlocksFormFilter
  banner: PageBlocksBannerFilter
  heading: PageBlocksHeadingFilter
  image: PageBlocksImageFilter
  video: PageBlocksVideoFilter
  audio: PageBlocksAudioFilter
  content: PageBlocksContentFilter
  testimonial: PageBlocksTestimonialFilter
}

input PageFilter {
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentMutation {
  post: PostMutation
  global: GlobalMutation
  author: AuthorMutation
  page: PageMutation
}

input PostMutation {
  title: String
  desc: String
  keywords: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  _body: JSON
}

input GlobalHeaderIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
  darkMode: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input AuthorMutation {
  name: String
  avatar: String
}

input PageBlocksHeaderMutation {
  title: String
  pagedesc: String
  pagekeywords: String
}

input PageBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
  link: String
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
}

input PageBlocksHeroMutation {
  tagline: String
  headline: String
  text: JSON
  actions: [PageBlocksHeroActionsMutation]
  image: PageBlocksHeroImageMutation
}

input PageBlocksFeaturesItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksFeaturesItemsMutation {
  icon: PageBlocksFeaturesItemsIconMutation
  title: String
  text: JSON
}

input PageBlocksFeaturesMutation {
  items: [PageBlocksFeaturesItemsMutation]
  color: String
}

input PageBlocksWeeknieuwsMutation {
  LinkTitle: String
  file: String
}

input PageBlocksFormItemsMutation {
  type: String
  questiontitle: String
  questionrequired: Boolean
  questionid: String
  placeholder: String
}

input PageBlocksFormMutation {
  airformEmail: String
  airformTitle: String
  items: [PageBlocksFormItemsMutation]
}

input PageBlocksBannerMutation {
  bannerURL: String
  bannertext: String
  vervaldatum: String
}

input PageBlocksHeadingMutation {
  titleText: String
  textsize: String
}

input PageBlocksImageMutation {
  fileRef: String
  imageTitle: String
  alt: String
  description: String
}

input PageBlocksVideoMutation {
  videoURL: String
  videodescription: JSON
  coverImage: String
  title: String
}

input PageBlocksAudioMutation {
  audioURL: String
  audiodescription: JSON
  title: String
}

input PageBlocksContentMutation {
  body: JSON
}

input PageBlocksTestimonialMutation {
  quote: JSON
  author: String
}

input PageBlocksMutation {
  header: PageBlocksHeaderMutation
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  weeknieuws: PageBlocksWeeknieuwsMutation
  form: PageBlocksFormMutation
  banner: PageBlocksBannerMutation
  heading: PageBlocksHeadingMutation
  image: PageBlocksImageMutation
  video: PageBlocksVideoMutation
  audio: PageBlocksAudioMutation
  content: PageBlocksContentMutation
  testimonial: PageBlocksTestimonialMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  